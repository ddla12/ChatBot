(()=>{"use strict";class e{constructor(e){({input:this.input,reply:this.reply}=e)}}const s={choose:e=>e[~~(Math.random()*e.length)],chance(e){return e.find((e=>1==e[1]))[0]||this.choose(e.filter((e=>e[1]>=Math.random())).map((e=>e[0])))}};Object.defineProperty(window,"ChatBot",{value:class{constructor(e){this.answers=[],e&&({delay:this.delay,errors:this.errors,answerPrefix:this.answerPrefix}=e),Object.seal(this)}to(r){return((r,t)=>({replyWith(s){t.answers=[...t.answers,new e({input:r,reply:s})]},chooseReply(n){t.answers=[...t.answers,new e({input:r,reply:()=>s.choose(n)})]},chanceOfReply(n){t.answers=[...t.answers,new e({input:r,reply:()=>s.chance(n)})]},async fetchReply(s){t.answers=[...t.answers,new e({input:r,reply:await s()})]}}))(r,this)}async resolveAnswer(e){return new Promise((s=>{setTimeout((()=>{s({state:"success",message:"string"==typeof e.reply?e.reply:e.reply()})}),this.delay)}))}findAnswerByInput(e){return e=e.replace(this.answerPrefix||"",""),this.answers.find((s=>"string"==typeof s.input?s.input===e:s.input instanceof Array?s.input.includes(e):s.input.test(e)))}async readInput(e){if(this.answerPrefix&&!e.startsWith(this.answerPrefix))return{state:"error",message:this.errors?.onBadPrefix||"Bad prefix"};const s=this.findAnswerByInput(e);return s?await this.resolveAnswer(s):{state:"error",message:this.errors?.onUnknow||"Unknow input"}}}})})();